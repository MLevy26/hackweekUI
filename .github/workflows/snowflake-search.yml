name: Snowflake Search API

on:
  repository_dispatch:
    types: [search_request]
  workflow_dispatch:
    inputs:
      searchTerm:
        description: 'Search term to query'
        required: true
      marketCode:
        description: 'Market code (e.g., us, gb, au)'
        required: true
      languageCode:
        description: 'Language code (e.g., en, fr, es)'
        required: true

permissions:
  contents: write
  
jobs:
  execute-search:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "snowflake-connector-python[pandas]"

      - name: Execute Snowflake query
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_ROLE: MLEVY
          SEARCH_TERM: ${{ github.event.client_payload.searchTerm || github.event.inputs.searchTerm }}
          MARKET_CODE: ${{ github.event.client_payload.marketCode || github.event.inputs.marketCode }}
          LANGUAGE_CODE: ${{ github.event.client_payload.languageCode || github.event.inputs.languageCode }}
        run: |
          python - <<EOF
          import os
          import json
          import snowflake.connector
          import sys
          
          print("Starting Snowflake query execution...")
          
          # Get environment variables
          search_term = os.environ['SEARCH_TERM']
          market_code = os.environ['MARKET_CODE']
          language_code = os.environ['LANGUAGE_CODE']
          
          print(f"Search parameters: term='{search_term}', market='{market_code}', language='{language_code}'")
          
          try:
              # Connect to Snowflake
              print("Connecting to Snowflake...")
              print(f"Account: {os.environ['SNOWFLAKE_ACCOUNT']}")
              print(f"User: {os.environ['SNOWFLAKE_USER']}")
              print(f"Database: {os.environ['SNOWFLAKE_DATABASE']}")
              print(f"Warehouse: {os.environ['SNOWFLAKE_WAREHOUSE']}")
              print(f"Role: {os.environ['SNOWFLAKE_ROLE']}")
              
              conn = snowflake.connector.connect(
                  account=os.environ['SNOWFLAKE_ACCOUNT'],
                  user=os.environ['SNOWFLAKE_USER'],
                  password=os.environ['SNOWFLAKE_PASSWORD'],
                  warehouse=os.environ['SNOWFLAKE_WAREHOUSE'],
                  database=os.environ['SNOWFLAKE_DATABASE'],
                  role=os.environ['SNOWFLAKE_ROLE']
              )
              
              print("Connected to Snowflake successfully")
              
              # Create cursor
              cursor = conn.cursor()
              
              # Execute query
              query = f"""
                  SELECT 
                      NAME as TITLE,
                      SUPPORT_CENTER_URL,
                      CONTENTFUL_URL,
                      BODY as CONTENT,
                      ARTICLE_ID
                  FROM APP_SUPPORT.APP_SUPPORT.CDT_CONTENTFUL_CONTENT_V2 
                  WHERE LOWER(HTML_REMOVED_BODY) ILIKE '%{search_term.lower()}%'
                  AND ARTICLE_OR_MACRO_IS_MOST_RECENT_VERSION = true 
                  AND BODY_IS_MOST_RECENT_VERSION = true 
                  AND COUNTRY_CODE = '{market_code}'
                  AND LANGUAGE_CODE = '{language_code}'
                  AND PUBLISHED_STATUS = 'published'
                  AND CONTENT_TYPE = 'Article'
                  ORDER BY NAME
              """
              
              print("Executing query...")
              print(f"Query: {query}")
              
              cursor.execute(query)
              
              # Fetch results
              print("Fetching results...")
              results = cursor.fetchall()
              columns = [desc[0] for desc in cursor.description]
              
              print(f"Found {len(results)} results")
              
              # Convert to list of dictionaries
              formatted_results = [
                  dict(zip(columns, row))
                  for row in results
              ]
              
              # Write results to file
              print("Writing results to file...")
              with open('results.json', 'w', encoding='utf-8') as f:
                  json.dump({
                      'results': formatted_results,
                      'metadata': {
                          'search_term': search_term,
                          'market_code': market_code,
                          'language_code': language_code,
                          'total_results': len(formatted_results)
                      }
                  }, f, ensure_ascii=False, indent=2)
                  
              print("Results saved successfully")
              
          except Exception as e:
              print(f"Error occurred: {str(e)}", file=sys.stderr)
              print(f"Error type: {type(e)}", file=sys.stderr)
              import traceback
              traceback.print_exc()
              sys.exit(1)
          finally:
              if 'conn' in locals():
                  print("Closing Snowflake connection...")
                  conn.close()
          EOF

      - name: Commit and push if there are changes
        run: |
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'action@github.com'
          git add results.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update search results [skip ci]" && git push)